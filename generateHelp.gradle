import groovy.json.JsonSlurper
import groovy.text.Template
import groovy.text.markup.MarkupTemplateEngine
import groovy.text.markup.TemplateConfiguration

task generateHelp {
    doLast {
        def templatesPath = 'src/main/resources/templates'
        def coverityBuildStepPath = 'src/main/resources/com/synopsys/integration/coverity/freestyle/CoverityBuildStep'
        def coverityPipelineStepPath = 'src/main/resources/com/synopsys/integration/coverity/pipeline/CoverityPipelineStep'
        def coverityGlobalConfigPath = 'src/main/resources/com/synopsys/integration/jenkins/coverity/global/CoverityGlobalConfig'
        def embeddedHelpPath = 'src/main/webapp/help'

        def config = new TemplateConfiguration()
        config.setAutoIndent(true)
        config.setAutoNewLine(true)

        def engine = new MarkupTemplateEngine(config)
        def jsonSlurper = new JsonSlurper()

        def buildStepJson = jsonSlurper.parse(file("${templatesPath}/buildStep.json"))

        generateHelpHtml(engine, templatesPath, buildStepJson, coverityBuildStepPath)
        generateHelpHtml(engine, templatesPath, buildStepJson, coverityPipelineStepPath)
        generateHelpHtml(engine, templatesPath, jsonSlurper.parse(file("${templatesPath}/globalConfig.json")), coverityGlobalConfigPath)
        generateHelpHtml(engine, templatesPath, jsonSlurper.parse(file("${templatesPath}/embeddedHelp.json")), embeddedHelpPath)
    }
}

void generateHelpHtml(final MarkupTemplateEngine engine, final String templatesPath, final Object jsonOutput, final String outputPath) {
    jsonOutput.entrySet().each { templateEntry ->
        Template template = engine.createTemplate(file("${templatesPath}/${templateEntry.key}").text)
        templateEntry.value.entrySet().each { fieldEntry ->
            String fieldName = fieldEntry.key
            Map model = fieldEntry.value
            def helpFile = file("${outputPath}/help-${fieldName}.html")
            if (helpFile.exists()) {
                helpFile.delete()
            }
            helpFile.withWriter('UTF-8') {
                template.make(model).writeTo(it)
            }
        }
    }
}
