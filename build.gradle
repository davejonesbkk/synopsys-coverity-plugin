buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies { classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+' }
}

plugins {
    id 'org.jenkins-ci.jpi' version '0.27.0'
}

group = 'org.jenkins-ci.plugins'
version = '1.1.0'
description = 'Allows users to run Coverity commands in their builds'

apply from: 'generateHelp.gradle'
apply plugin: 'com.blackducksoftware.integration.solution'

def jcenterRepo = project.repositories.findByName('BintrayJCenter')
project.repositories.remove(jcenterRepo)
def mavenRepo = project.repositories.findByName('maven')
project.repositories.remove(mavenRepo)

project.afterEvaluate {
    // MavenLocal is added by the gradle-jpi-plugin and the common-gradle-plugin so we have to remove it after the plugins are evaluated
    List<String> repoNames = new ArrayList()
    repoNames.addAll(project.repositories.getNames())
    for (String repoName : repoNames) {
        if (repoName.contains('MavenLocal')) {
            def repoToRemove = project.repositories.findByName(repoName)
            project.repositories.remove(repoToRemove)
        }
    }
}

jenkinsPlugin {
    coreVersion = '2.60.1'
    displayName = 'Synopsys Coverity Plugin'
    url = 'https://wiki.jenkins.io/display/JENKINS/Synopsys+Coverity+Plugin'
    gitHubUrl = 'https://github.com/jenkinsci/synopsys-coverity-plugin'

    pluginFirstClassLoader = false
}

dependencies {
    jenkinsPlugins 'org.jenkins-ci.plugins:credentials:1.9.4'

    implementation 'com.synopsys.integration:coverity-common:0.1.4'

    optionalJenkinsPlugins 'org.jenkins-ci.plugins:job-dsl:1.67'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-job:2.9'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-cps:2.23'
    optionalJenkinsPlugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.10'
}

task renameFile {
    doLast {
        if (project.version.toString().contains("SNAPSHOT")) {
            File libsDirectory = new File(project.buildDir, "libs")
            File originalFile = new File(libsDirectory, "${project.getName()}.hpi")
            File newFile = new File(libsDirectory, "${project.getName()}-${project.version}.hpi")
            originalFile.renameTo newFile
        }
    }
}

jar.dependsOn generateHelp
jpi.finalizedBy renameFile